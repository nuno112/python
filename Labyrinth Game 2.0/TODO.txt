1. Make the robot appear in a random spot at the start.
  - Create a getFreeSpace() method (check if there is another robot), and use
  random.choose on the returned list.
  - Assign the value to robotPosition
DONE


2. Wall doors functionality:
  - Player inputs 'm' followed by the direction


3. Build doors functionality:
  - Player inputs 'p' followed by the direction


4. Create unit tests with unittest module:
  4.1. Unit Test the constitution of the maze
    -

  4.2. Unit Test the creation of a labyrinth from a string
    -

  4.3. Unit Test the multiplayer game
    -


5. Create the multiplayer capability:
  5.1. Create server code (called server.py):
    5.1.1. The server decides the map to play
      -

    5.1.2. The server waits for players to connect until one of them inputs the
    'c' command
      -

    5.1.3. The server manages the clients turns and returns the new labyrinth
    to all clients
      -

    5.1.4. Based on the client-in-turn's command, update the labyrinth and send
    it to all clients again. Loop this until one player wins.
      -

  5.2. Create client code (called client.py):
    5.2.1. When one user inputs 'c', start the game and don't accept more
    connections.
      -

    5.2.2. Use threads to make the client listen for server responses and wait
    for user commands simultaneously
      -

  5.3. Differentiate between robots
    - Use lower case 'x' for the enemy robots


6. Delete the saving/replay functionality
